{
    "sequential": {
        "name": "Sequential Search",
        "informations": {
            "description": "The {{Sequential Search}} algorithm (Sequential Search, or Linear Search) is a simple searching algorithm. It sequentially checks each element of the array until it finds the target element or until the end of the array is reached.",
            "advantage": [
                "Simple, easy to understand, and easy to implement",
                "Does not require the array to be sorted"
            ],
            "disadvantage": "Poor performance for large arrays",
            "application": [
                "Often used for teaching and illustrating basic sorting algorithms",
                "Searching in small or unsorted arrays"
            ]
        },
        "comments": {
            "cpp": [
                "Declare the function {sqts}",
                "Loop through each element of the array",
                "If the current element is {target}, return the position {i}",
                "If {target} is not found, the function will return {-_1}"
            ],
            "js": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "{{{cpp,2}}}",
                "{{{cpp,3}}}"
            ],
            "py": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "Check if the current element is {target}",
                "If true, return the position {i}",
                "{{{cpp,3}}}"
            ]
        }
    },
    "binary": {
        "name": "Binary Search",
        "informations": {
            "description": "The {{Binary Search}} algorithm is an efficient searching algorithm for sorted arrays. This algorithm works by repeatedly dividing the search range in half to reduce the number of elements to be checked. It continues this process until it finds the target element or until the search range is narrowed down to zero.",
            "advantage": "Good performance, even with large arrays",
            "disadvantage": "Requires the array to be sorted before performing the search",
            "application": [
                "Searching in large sorted arrays",
                "Used in databases for quickly searching information in sorted tables",
                "Used in Binary Search Tree data structure for efficient searching, inserting, and deleting elements"
            ]
        },
        "comments": {
            "cpp": [
                "Declare the function {bnrs}",
                "Initialize the {left} variable to mark the start position in the search range",
                "Initialize the {right} variable to mark the end position in the search range",
                "Condition to ensure that the search process will continue until {target} is found or until there are no more elements in the search range",
                "Initialize the {middle} variable to get the middle position in the search range",
                "If the middle element is {target}, return the position {middle}",
                "When the middle element is not {target}, if {target} is on the right side of {middle}, update {left} to {middle_ _+_ _1}, narrowing the search range to the right half",
                "Otherwise, when {target} is on the left side of {middle}, update {right} to {middle_ _-_ _1}, narrowing the search range to the left half",
                "",
                "If {target} is not found, the function will return {-_1}"
            ],
            "js": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "{{{cpp,2}}}",
                "{{{cpp,3}}}",
                "Initialize the {middlejs} variable to get the middle position in the search range",
                "If the middle element is {target}, return the position {middlejs}",
                "When the middle element is not {target}, if {target} is on the right side of {middlejs}, update {left} to {middlejs_ _+_ _1}, narrowing the search range to the right half",
                "Otherwise, when {target} is on the left side of {middlejs}, update {right} to {middlejs_ _-_ _1}, narrowing the search range to the left half",
                "",
                "{{{cpp,9}}}"
            ],
            "py": [
                "{{{cpp,0}}}",
                "Initialize 2 variables {left} and {right} to mark the search range",
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "Check if the middle element is {target}",
                "If true, return the position {middle}",
                "When the middle element is not {target}, check if {target} is on the right side of {middle}",
                "If true, update {left} to {middle_ _+_ _1}, narrowing the search range to the right half",
                "Otherwise, when {target} is on the left side of {middle}",
                "Update {right} to {middle_ _-_ _1}, narrowing the search range to the left half",
                "{{{cpp,9}}}"
            ]
        }
    },
    "_": {
        "constraints": [
            "The first line is the value to search for",
            "The second line is the array of values (minimum of 12 values)",
            "Values separated by whitespace",
            "Values are integers in the range from -9 to 99"
        ]
    }
}