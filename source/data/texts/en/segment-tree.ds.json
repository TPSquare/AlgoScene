{
    "NAME": "Segment Tree",
    "INFORMATIONS": {
        "definition": "A segment tree is a data structure used to store information about subarrays of an array, allowing for quick query and update operations on these segments, such as finding the sum, maximum value, minimum value, etc., of a subarray.",
        "advantage": [
            "Fast query and update speed",
            "Supports various types of queries"
        ],
        "disadvantage": [
            "Requires additional memory to store the tree",
            "Slightly complex implementation"
        ]
    },
    "list": {
        "sum": {
            "name": "Sum of the segment",
            "comments": {
                "cpp": [
                    "Initialize the maximum size of the input array",
                    "Initialize the segment tree with a size four times the size of the input array (proven)",
                    "",
                    "Define a function to build the segment tree from the input array",
                    "If the segment contains only one element, assign the value to the corresponding element in the segment tree",
                    "Otherwise, continue dividing the segment",
                    "Calculate the middle position",
                    "Build the segment tree for the left half",
                    "Build the segment tree for the right half",
                    "Assign the sum value from the two halves to the current element",
                    "",
                    "",
                    "",
                    "Define a function to update the value of a specific element",
                    "If the element to be updated is out of the current segment, exit the function",
                    "If reached the element to be updated, assign the new value to that element",
                    "Otherwise, continue dividing the segment and update the segment tree",
                    "{{{cpp,6}}}",
                    "Update the value for the left half",
                    "Update the value for the right half",
                    "{{{cpp,9}}}",
                    "",
                    "",
                    "",
                    "Define a function to update the value in a segment",
                    "If the segment to be updated is out of the current segment, exit the function",
                    "If the segment to be updated contains only one element, update the value in the segment tree for that element by adding the value",
                    "{{{cpp,16}}}",
                    "{{{cpp,6}}}",
                    "{{{cpp,18}}}",
                    "{{{cpp,19}}}",
                    "{{{cpp,9}}}",
                    "",
                    "",
                    "",
                    "Define a function to get the sum value of a segment",
                    "If the segment to be searched is out of the current segment, return the sum as {0} (ensuring no effect on the result)",
                    "If the segment to be searched contains the current segment, return the sum value as the current element in the segment tree",
                    "{{{cpp,6}}}",
                    "Get the sum value from the left half",
                    "Get the sum value from the right half",
                    "Return the sum of the two halves"
                ],
                "js": "{{{all(cpp)}}}"
            }
        },
        "min": {
            "name": "Find the minimum value of the segment",
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "{{{sum-cpp,0-8}}}",
                    "Assign the minimum value from the two halves to the current element",
                    "{{{sum-cpp,10-19}}}",
                    "{{{cpp,12}}}",
                    "{{{sum-cpp,21-30}}}",
                    "{{{cpp,12}}}",
                    "",
                    "",
                    "",
                    "Define a function to get the minimum value of a segment",
                    "If the segment to be searched is out of the current segment, return the minimum value as {INTMAX} (ensuring no effect on the result)",
                    "If the segment to be searched contains the current segment, return the minimum value as the current element in the segment tree",
                    "{{{cpp,9}}}",
                    "Get the minimum value from the left half",
                    "Get the minimum value from the right half",
                    "Return the minimum value of the two halves"
                ],
                "js": [
                    "{{{cpp,3-38}}}",
                    "If the segment to be searched is out of the current segment, return the minimum value as {Infinity} (ensuring no effect on the result)",
                    "{{{cpp,40-44}}}"
                ]
            }
        },
        "max": {
            "name": "Find the maximum value of the segment",
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "{{{sum-cpp,0-8}}}",
                    "Assign the maximum value from the two halves to the current element",
                    "{{{sum-cpp,10-19}}}",
                    "{{{cpp,12}}}",
                    "{{{sum-cpp,21-30}}}",
                    "{{{cpp,12}}}",
                    "",
                    "",
                    "",
                    "Define a function to get the maximum value of a segment",
                    "If the segment to be searched is out of the current segment, return the maximum value as {INTMIN} (ensuring no effect on the result)",
                    "If the segment to be searched contains the current segment, return the maximum value as the current element in the segment tree",
                    "{{{cpp,9}}}",
                    "Get the maximum value from the left half",
                    "Get the maximum value from the right half",
                    "Return the maximum value of the two halves"
                ],
                "js": [
                    "{{{cpp,3-38}}}",
                    "If the segment to be searched is out of the current segment, return the maximum value as {-Infinity} (ensuring no effect on the result)",
                    "{{{cpp,40-44}}}"
                ]
            }
        },
        "gcd": {
            "name": "Find the greatest common divisor of the segment",
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "{{{sum-cpp,0-8}}}",
                    "Assign the greatest common divisor from the two halves to the current element",
                    "{{{sum-cpp,10-19}}}",
                    "{{{cpp,12}}}",
                    "{{{sum-cpp,21-30}}}",
                    "{{{cpp,12}}}",
                    "",
                    "",
                    "",
                    "Define a function to get the greatest common divisor of a segment",
                    "If the segment to be searched is out of the current segment, return the greatest common divisor as {0} (ensuring no effect on the result)",
                    "If the segment to be searched contains the current segment, return the greatest common divisor as the current element in the segment tree",
                    "{{{cpp,9}}}",
                    "Get the greatest common divisor from the left half",
                    "Get the greatest common divisor from the right half",
                    "Return the greatest common divisor of the two halves"
                ],
                "js": [
                    "Define a function to calculate the greatest common divisor",
                    "",
                    "{{{cpp,3-44}}}"
                ]
            }
        },
        "lcm": {
            "name": "Find the least common multiple of the segment",
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "{{{sum-cpp,0-8}}}",
                    "Assign the least common multiple from the two halves to the current element",
                    "{{{sum-cpp,10-19}}}",
                    "{{{cpp,12}}}",
                    "{{{sum-cpp,21-30}}}",
                    "{{{cpp,12}}}",
                    "",
                    "",
                    "",
                    "Define a function to get the least common multiple of a segment",
                    "If the segment to be searched is out of the current segment, return the least common multiple as {1} (ensuring no effect on the result)",
                    "If the segment to be searched contains the current segment, return the least common multiple as the current element in the segment tree",
                    "{{{cpp,9}}}",
                    "Get the least common multiple from the left half",
                    "Get the least common multiple from the right half",
                    "Return the least common multiple of the two halves"
                ],
                "js": [
                    "{{{gcd-js,0}}}",
                    "Define a function to calculate the least common multiple",
                    "",
                    "{{{cpp,3-44}}}"
                ]
            }
        }
    },
    "constraints": {
        "default": [
            "Values are separated by spaces",
            "Values are integers in the range from 1 to 100",
            "There are at least 2 values (a maximum of 8 values will be used)"
        ]
    },
    "complexity": {
        "build": "Build",
        "update": "Update an element",
        "rangeUpdate": "Update a segment",
        "get": "Query"
    }
}