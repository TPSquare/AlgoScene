{
    "NAME": "Search",
    "list": {
        "sequential": {
            "name": "Sequential Search",
            "informations": {
                "idea": [
                    "Starting from the first element of the array, the algorithm checks if this element is the target element",
                    "If not, it moves to the next element and continues the checking process",
                    "This process continues until the element is found or no more elements are left to check"
                ],
                "advantage": [
                    "Simple, easy to understand and implement",
                    "Does not require the array to be sorted"
                ],
                "disadvantage": "Poor performance for large arrays",
                "application": [
                    "Often used for teaching and illustrating basic search algorithms",
                    "Searching in small or unsorted arrays"
                ]
            },
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "Define function {sqts}",
                    "Loop through each element of the array",
                    "If the current element is {target}, return the position {i}",
                    "If {target} is not found, the function will return {minus1}"
                ],
                "js": [
                    "{{{cpp,3-6}}}"
                ],
                "py": [
                    "Define function {sqt_s}",
                    "{{{cpp,4}}}",
                    "Check if the current element is {target}",
                    "If true, return the position {i}",
                    "{{{cpp,6}}}"
                ]
            }
        },
        "binary": {
            "name": "Binary Search",
            "informations": {
                "idea": [
                    "Start by selecting the middle element of the sorted ascending array",
                    "Compare this element with the target value; if they are equal, conclude the result and end the search",
                    "If the target value is less than the middle element, continue searching in the left half of the array",
                    "If the target value is greater than the middle element, continue searching in the right half of the array",
                    "Repeat the above process until the target value is found or the search range becomes empty"
                ],
                "advantage": "Good performance even for large arrays",
                "disadvantage": "Requires the array to be sorted before performing the search",
                "application": [
                    "Searching in large sorted arrays",
                    "Used in databases to quickly find information in sorted tables",
                    "Used in Binary Search Trees to efficiently search, insert, and delete elements"
                ]
            },
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "Define function {bnrs}",
                    "Initialize the {left} variable to mark the start position in the search range",
                    "Initialize the {right} variable to mark the end position in the search range",
                    "Condition to ensure that the search process will continue until {target} is found or no elements are left in the search range",
                    "Initialize the {middle} variable to get the middle position in the search range",
                    "If the middle element is {target}, return the position {middle}",
                    "When the middle element is not {target}, if {target} is on the right side of {middle}, {left} is updated to {middleplus1}, narrowing the search range to the right half",
                    "Otherwise, if {target} is on the left side of {middle}, {right} is updated to {middleminus1}, narrowing the search range to the left half",
                    "",
                    "If {target} is not found, the function will return {minus1}"
                ],
                "js": [
                    "{{{cpp,3-6}}}",
                    "Initialize the {middlejs} variable to get the middle position in the search range",
                    "If the middle element is {target}, return the position {middlejs}",
                    "When the middle element is not {target}, if {target} is on the right side of {middlejs}, {left} is updated to {middlejsplus1}, narrowing the search range to the right half",
                    "Otherwise, if {target} is on the left side of {middlejs}, {right} is updated to {middlejsminus1}, narrowing the search range to the left half",
                    "",
                    "{{{cpp,12}}}"
                ],
                "py": [
                    "Define function {bnr_s}",
                    "Initialize 2 variables {left} and {right} to mark the search range",
                    "{{{cpp,6-7}}}",
                    "Check if the middle element is {target}",
                    "If true, return the position {middle}",
                    "When the middle element is not {target}, check if {target} is on the right side of {middle}",
                    "If true, {left} is updated to {middleplus1}, narrowing the search range to the right half",
                    "Otherwise, if {target} is on the left side of {middle}",
                    "{right} is updated to {middleminus1}, narrowing the search range to the left half",
                    "{{{cpp,12}}}"
                ]
            }
        }
    },
    "constraints": {
        "default": [
            "The first line is the target value",
            "The second line is the array of values (at least 12 values)",
            "Values are separated by whitespace",
            "Values are integers in the range from -9 to 99"
        ]
    }
}
