{
    "NAME": "Tìm kiếm",
    "list": {
        "sequential": {
            "name": "Tìm kiếm tuần tự",
            "informations": {
                "idea": [
                    "Bắt đầu từ phần tử đầu tiên của mảng, thuật toán kiểm tra xem phần tử này có phải là phần tử cần tìm không",
                    "Nếu không phải, nó di chuyển đến phần tử tiếp theo và tiếp tục quá trình kiểm tra",
                    "Quá trình này tiếp tục cho đến khi phần tử được tìm thấy hoặc không còn phần tử nào để kiểm tra"
                ],
                "advantage": [
                    "Đơn giản, dễ hiểu và dễ triển khai",
                    "Không yêu cầu mảng phải được sắp xếp"
                ],
                "disadvantage": "Hiệu suất kém đối với các mảng lớn",
                "application": [
                    "Thường được sử dụng để giảng dạy và minh họa cơ bản về thuật toán tìm kiếm",
                    "Tìm kiếm trong mảng nhỏ hoặc không được sắp xếp"
                ]
            },
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "Định nghĩa hàm {sqts}",
                    "Vòng lặp duyệt qua từng phần tử của mảng",
                    "Nếu phần tử hiện tại là {target}, trả về vị trí {i}",
                    "Nếu không tìm thấy {target}, hàm sẽ trả về {minus1}"
                ],
                "js": [
                    "{{{cpp,3-6}}}"
                ],
                "py": [
                    "Định nghĩa hàm {sqt_s}",
                    "{{{cpp,4}}}",
                    "Kiểm tra xem phần tử hiện tại có phải là {target} hay không",
                    "Nếu đúng, trả về vị trí {i}",
                    "{{{cpp,6}}}"
                ]
            }
        },
        "binary": {
            "name": "Tìm kiếm nhị phân",
            "informations": {
                "idea": [
                    "Bắt đầu với việc chọn phần tử ở giữa của mảng đã được sắp xếp tăng dần",
                    "So sánh phần tử này với giá trị cần tìm, nếu bằng nhau thì kết luận kết quả và kết thúc tìm kiếm",
                    "Nếu giá trị cần tìm nhỏ hơn phần tử ở giữa, tiếp tục tìm kiếm trong nửa bên trái của mảng",
                    "Nếu giá trị cần tìm lớn hơn phần tử ở giữa, tiếp tục tìm kiếm trong nửa bên phải của mảng",
                    "Lặp lại quá trình trên cho đến khi tìm thấy giá trị cần tìm hoặc phạm vi tìm kiếm trở nên rỗng"
                ],
                "advantage": "Hiệu suất tốt, kể cả với mảng lớn",
                "disadvantage": "Yêu cầu mảng phải được sắp xếp trước khi thực hiện tìm kiếm",
                "application": [
                    "Tìm kiếm trong mảng lớn đã được sắp xếp",
                    "Sử dụng trong các cơ sở dữ liệu để tìm kiếm nhanh chóng thông tin trong các bảng được sắp xếp",
                    "Được sử dụng trong cấu trúc dữ liệu cây tìm kiếm nhị phân (Binary Search Tree) để tìm kiếm, thêm và xóa phần tử một cách hiệu quả"
                ]
            },
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "Định nghĩa hàm {bnrs}",
                    "Khởi tạo biến {left} đánh dấu vị trí bắt đầu trong phạm vi tìm kiếm",
                    "Khởi tạo biến {right} đánh dấu vị trí kết thúc trong phạm vi tìm kiếm",
                    "Điều kiện để đảm bảo rằng quá trình tìm kiếm sẽ tiếp tục đến khi tìm thấy {target} hoặc đến khi không còn phần tử nào trong phạm vi tìm kiếm",
                    "Khởi tạo biến {middle} để lấy vị trí chính giữa trong phạm vi tìm kiếm",
                    "Nếu phần tử ở giữa là {target} thì trả về vị trí {middle}",
                    "Khi phần tử ở giữa không phải là {target}, nếu {target} nằm ở phía bên phải của {middle}, {left} được cập nhật là {middleplus1}, thu hẹp phạm vi tìm kiếm sang nửa bên phải",
                    "Ngược lại, khi {target} nằm ở phía bên trái của {middle}, {right} được cập nhật là {middleminus1}, thu hẹp phạm vi tìm kiếm sang nửa bên trái",
                    "",
                    "Nếu không tìm thấy {target}, hàm sẽ trả về {minus1}"
                ],
                "js": [
                    "{{{cpp,3-6}}}",
                    "Khởi tạo biến {middlejs} để lấy vị trí chính giữa trong phạm vi tìm kiếm",
                    "Nếu phần tử ở giữa là {target} thì trả về vị trí {middlejs}",
                    "Khi phần tử ở giữa không phải là {target}, nếu {target} nằm ở phía bên phải của {middlejs}, {left} được cập nhật là {middlejsplus1}, thu hẹp phạm vi tìm kiếm sang nửa bên phải",
                    "Ngược lại, khi {target} nằm ở phía bên trái của {middlejs}, {right} được cập nhật là {middlejsminus1}, thu hẹp phạm vi tìm kiếm sang nửa bên trái",
                    "",
                    "{{{cpp,12}}}"
                ],
                "py": [
                    "Định nghĩa hàm {bnr_s}",
                    "Khởi tạo 2 biến {left} và {right} để đánh dấu phạm vi tìm kiếm",
                    "{{{cpp,6-7}}}",
                    "Kiểm tra xem phần tử ở giữa có phải là {target} hay không",
                    "Nếu đúng, trả về vị trí {middle}",
                    "Khi phần tử ở giữa không phải là {target}, kiểm tra xem {target} có nằm ở phía bên phải của {middle} hay không",
                    "Nếu đúng, {left} được cập nhật là {middleplus1}, thu hẹp phạm vi tìm kiếm sang nửa bên phải",
                    "Ngược lại, khi {target} nằm ở phía bên trái của {middle}",
                    "{right} được cập nhật là {middleminus1}, thu hẹp phạm vi tìm kiếm sang nửa bên trái",
                    "{{{cpp,12}}}"
                ]
            }
        }
    },
    "constraints": {
        "default": [
            "Dòng đầu tiên là giá trị cần tìm",
            "Dòng thứ hai là mảng giá trị (tối thiểu 12 giá trị)",
            "Các giá trị cách nhau bởi khoảng trắng",
            "Giá trị là một số nguyên nằm trong đoạn từ -9 đến 99"
        ]
    }
}