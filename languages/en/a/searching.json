{
    "sequential": {
        "name": "Sequential Search",
        "informations": {
            "description": "The {{Sequential Search}} algorithm (Sequential Search, or Linear Search) is a simple search algorithm. In this algorithm, each element of the array is checked one by one until the desired element is found or until the end of the array is reached.",
            "advantage": [
                "Simple, easy to understand, and easy to implement.",
                "Does not require the array to be sorted."
            ],
            "disadvantage": "Poor performance for large arrays.",
            "application": [
                "Often used for teaching and illustrating basic sorting algorithms.",
                "Searching in small or unsorted arrays."
            ]
        },
        "comments": {
            "cpp": [
                "",
                "",
                "",
                "Declare the {sqts} function.",
                "Loop through each element of the array.",
                "If the current element is {target}, return position {i}.",
                "If {target} is not found, the function will return {-1}."
            ],
            "js": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "{{{cpp,5}}}",
                "{{{cpp,6}}}"
            ],
            "py": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "Check if the current element is {target}.",
                "If true, return position {i}.",
                "{{{cpp,6}}}"
            ]
        }
    },
    "binary": {
        "name": "Binary Search",
        "informations": {
            "description": "The {{Binary Search}} algorithm is an efficient search algorithm for sorted arrays. This algorithm continuously divides the search range in half to minimize the number of elements to be checked. It iterates until the desired element is found or until the search range is narrowed down to zero.",
            "advantage": "Good performance, even with large arrays.",
            "disadvantage": "Requires the array to be sorted before performing the search.",
            "application": [
                "Searching in large sorted arrays.",
                "Used in databases to quickly search information in sorted tables.",
                "Used in Binary Search Tree data structure to efficiently search, insert, and delete elements."
            ]
        },
        "comments": {
            "cpp": [
                "",
                "",
                "",
                "Declare the {bnrs} function.",
                "Initialize the {left} variable to mark the starting position in the search range.",
                "Initialize the {right} variable to mark the ending position in the search range.",
                "Condition to ensure that the search process will continue until {target} is found or until there are no more elements in the search range.",
                "Initialize the {middle} variable to get the middle position in the search range.",
                "If the element in the middle is {target}, return the {middle} position.",
                "When the element in the middle is not {target}, if {target} is on the right side of {middle}, update {left} to {middle + 1}, narrowing the search range to the right half.",
                "Otherwise, when {target} is on the left side of {middle}.",
                "Update {right} to {middle - 1}, narrowing the search range to the left half.",
                "",
                "If {target} is not found, the function will return {-1}."
            ],
            "js": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "{{{cpp,5}}}",
                "{{{cpp,6}}}",
                "Initialize the {middlejs} variable to get the middle position in the search range.",
                "If the element in the middle is {target}, return the {middlejs} position.",
                "When the element in the middle is not {target}, if {target} is on the right side of {middlejs}, update {left} to {middlejs + 1}, narrowing the search range to the right half.",
                "Otherwise, when {target} is on the left side of {middlejs}.",
                "",
                "{{{cpp,12}}}"
            ],
            "py": [
                "{{{cpp,3}}}",
                "Initialize 2 variables {left} and {right} to mark the search range.",
                "{{{cpp,6}}}",
                "{{{cpp,7}}}",
                "Check if the element in the middle is {target}.",
                "If true, return the {middle} position.",
                "When the element in the middle is not {target}, check if {target} is on the right side of {middle}.",
                "If true, update {left} to {middle + 1}, narrowing the search range to the right half.",
                "Otherwise, when {target} is on the left side of {middle}.",
                "Update {right} to {middle - 1}, narrowing the search range to the left half.",
                "{{{cpp,12}}}"
            ]
        }
    },
    "_": {
        "constraints": [
            "The first line is the value to be searched for.",
            "The second line is the array of values (minimum of 12 values).",
            "Values are separated by spaces.",
            "Values are integers in the range from -9 to 99."
        ]
    }
}
