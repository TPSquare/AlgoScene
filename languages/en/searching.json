{
    "sequential": {
        "name": "Sequential Search",
        "informations": {
            "description": "The {{Sequential Search}} algorithm (also known as Linear Search) is a simple search algorithm. In this algorithm, each element of the array is checked sequentially until the desired element is found or the array ends.",
            "advantage": [
                "Simple, easy to understand, and easy to implement.",
                "Does not require the array to be sorted."
            ],
            "disadvantage": "Poor performance for large arrays.",
            "application": [
                "Commonly used for teaching and illustrating basic search algorithms.",
                "Searching in small or unsorted arrays."
            ]
        },
        "comments": {
            "cpp": [
                "Declare the function {sqts}.",
                "Loop through each element of the list.",
                "If the current element is {target}, return the position {i}.",
                "If {target} is not found, the function will return {-_1}."
            ],
            "js": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "{{{cpp,2}}}",
                "{{{cpp,3}}}"
            ],
            "py": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "Check if the current element is {target}.",
                "If true, return the position {i}.",
                "{{{cpp,3}}}"
            ]
        }
    },
    "binary": {
        "name": "Binary Search",
        "informations": {
            "description": "The {{Binary Search}} algorithm is an efficient search algorithm for sorted arrays. This algorithm works by repeatedly dividing the search range in half to minimize the number of elements to be checked. The process continues until the desired element is found or the search range is reduced to zero.",
            "advantage": "Good performance, even for large arrays.",
            "disadvantage": "Requires the array to be sorted before performing the search.",
            "application": [
                "Searching in large sorted arrays.",
                "Used in databases for quick information retrieval in sorted tables.",
                "Used in Binary Search Tree data structures for efficient searching, insertion, and deletion of elements."
            ]
        },
        "comments": {
            "cpp": [
                "Declare the function {bnrs}.",
                "Initialize the variable {left} to mark the starting position of the search range.",
                "Initialize the variable {right} to mark the ending position of the search range.",
                "Ensure that the search process continues until {target} is found or no elements remain in the search range.",
                "Initialize the variable {middle} to get the middle position of the search range.",
                "If the middle element is {target}, return the position {middle}.",
                "If the middle element is not {target}, and {target} is on the right side of {middle}, update {left} to {middle_ _+_ _1}, narrowing the search range to the right half.",
                "If {target} is on the left side of {middle}, update {right} to {middle_ _-_ _1}, narrowing the search range to the left half.",
                "",
                "If {target} is not found, the function will return {-_1}."
            ],
            "js": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "{{{cpp,2}}}",
                "{{{cpp,3}}}",
                "Initialize the variable {middlejs} to get the middle position of the search range.",
                "If the middle element is {target}, return the position {middlejs}.",
                "If the middle element is not {target}, and {target} is on the right side of {middlejs}, update {left} to {middlejs_ _+_ _1}, narrowing the search range to the right half.",
                "If {target} is on the left side of {middlejs}, update {right} to {middlejs_ _-_ _1}, narrowing the search range to the left half.",
                "",
                "{{{cpp,9}}}"
            ],
            "py": [
                "{{{cpp,0}}}",
                "Initialize two variables {left} and {right} to mark the search range.",
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "Check if the middle element is {target}.",
                "If true, return the position {middle}.",
                "If the middle element is not {target}, check if {target} is on the right side of {middle}.",
                "If true, update {left} to {middle_ _+_ _1}, narrowing the search range to the right half.",
                "If {target} is on the left side of {middle},",
                "Update {right} to {middle_ _-_ _1}, narrowing the search range to the left half.",
                "{{{cpp,9}}}"
            ]
        }
    },
    "_": {
        "constraints": [
            "The first line is the value to be searched.",
            "The second line is an array of values (at least 12 values).",
            "Values are separated by spaces.",
            "Values are integers in the range from -9 to 99."
        ]
    }
}
