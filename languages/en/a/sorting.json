{
    "bubble": {
        "name": "Bubble Sort",
        "informations": {
            "description": "The {{Bubble Sort}} algorithm is a simple sorting algorithm. It works by repeatedly stepping through the array, comparing each pair of adjacent elements and swapping them if they are in the wrong order. This process is repeated from the beginning of the array until no more swaps are needed.",
            "advantage": [
                "Simple, intuitive, easy to understand.",
                "Effective for small arrays."
            ],
            "disadvantage": "Poor performance for large arrays.",
            "application": [
                "Commonly used for teaching and illustrating basic sorting algorithms.",
                "Simple and effective, sufficient for small data arrays."
            ]
        },
        "comments": {
            "cpp": [
                "",
                "",
                "",
                "Declare the {bbs} function.",
                "The outer loop helps iterate through the array multiple times to push the largest (for ascending order) or smallest (for descending order) element to the end of the array.",
                "The inner loop is used to compare adjacent pairs of elements and swap them if they are out of order.",
                "Check if two adjacent elements in the array are in the wrong order. If the condition is true, these two elements need to be swapped to move the larger element towards the end (for ascending order).",
                "Swap the two elements."
            ],
            "js": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "{{{cpp,5}}}",
                "{{{cpp,6}}}",
                "{{{cpp,7}}}"
            ],
            "py": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "{{{cpp,5}}}",
                "{{{cpp,6}}}",
                "{{{cpp,7}}}"
            ]
        }
    },
    "selection": {
        "name": "Selection Sort",
        "informations": {
            "description": "The {{Selection Sort}} algorithm is a simple sorting algorithm. It works by repeatedly finding the minimum element in the array and swapping it with the first unsorted element, then finding the next smallest element and swapping it with the second unsorted element, and so on until the entire array is sorted.",
            "advantage": [
                "Simple, intuitive, easy to understand.",
                "Effective for small arrays."
            ],
            "disadvantage": "Poor performance for large arrays.",
            "application": [
                "Commonly used for teaching and illustrating basic sorting algorithm concepts.",
                "Simple and effective, sufficient for small data arrays."
            ]
        },
        "comments": {
            "cpp": [
                "",
                "",
                "",
                "Declare the {slts} function.",
                "The outer loop helps iterate through the array multiple times to find and place the smallest or largest element of the unsorted part of the array in its correct position.",
                "Initialize the {min} variable to hold the position of the smallest element in the unsorted part of the array.",
                "The inner loop is used to find the smallest element in the unsorted part of the array.",
                "Check if the element at position {j} is smaller than the element at position {min}. If true, update {min} to hold the position of the current smallest element.",
                "Swap the two elements."
            ],
            "js": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "{{{cpp,5}}}",
                "{{{cpp,6}}}",
                "{{{cpp,7}}}",
                "{{{cpp,8}}}"
            ],
            "py": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "{{{cpp,5}}}",
                "{{{cpp,6}}}",
                "{{{cpp,7}}}",
                "Update {min}.",
                "{{{cpp,8}}}"
            ]
        }
    },
    "insertion": {
        "name": "Insertion Sort",
        "informations": {
            "description": "The {{Insertion Sort}} algorithm is a simple sorting algorithm. It sequentially selects all elements of the array, finds the appropriate position, and inserts it there.",
            "advantage": [
                "Simple, intuitive, easy to understand.",
                "Effective for small arrays."
            ],
            "disadvantage": "Poor performance for large arrays.",
            "application": [
                "Simple and effective, sufficient for small data arrays.",
                "Useful when the input data is nearly sorted.",
                "In practice, this algorithm is often used as part of more complex sorting algorithms."
            ]
        },
        "comments": {
            "cpp": [
                "",
                "",
                "",
                "Declare the {ists} function.",
                "The outer loop is to iterate through the positions of the array. The first element is considered sorted.",
                "Initialize {j} to traverse backward through the sorted elements.",
                "Initialize {current} to hold the value of the currently being positioned element.",
                "The inner loop is used to traverse from right to left, finding the correct position to insert the {current} element into the sorted part of the array. Compare to check if the element at position {j} is greater than {current}, if true, shift the element at {j} to the right to make room for {current}.",
                "Shift the element at position {j} to the right.",
                "Insert {current} into the correct position."
            ],
            "js": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "{{{cpp,5}}}",
                "{{{cpp,6}}}",
                "{{{cpp,7}}}",
                "{{{cpp,8}}}",
                "{{{cpp,9}}}"
            ],
            "py": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "Initialize {j} to traverse backward through the sorted elements. Initialize {current} to hold the value of the currently being positioned element.",
                "{{{cpp,7}}}",
                "{{{cpp,8}}}",
                "Decrease {j} to continue traversing to the left.",
                "{{{cpp,9}}}"
            ]
        }
    },
    "quick": {
        "name": "Quick Sort",
        "informations": {
            "description": "The {{Quick Sort}} algorithm is a popular sorting algorithm based on the principle of divide and conquer. It works by selecting a pivot element and partitioning the other elements of the array into two groups, one group containing elements less than the pivot and the other containing elements greater than the pivot. It then recursively applies the same process to the two subgroups, resulting in a sorted array.",
            "advantage": "Good performance, even for large arrays.",
            "application": [
                "Used in real-world applications to sort large arrays.",
                "Used in data searching and classification algorithms."
            ]
        },
        "comments": {
            "cpp": [
                "",
                "",
                "",
                "Declare the function {qs}.",
                "If {left} is greater than or equal to {right}, indicating that the array segment to be sorted has only one element or no elements left to sort, the function will stop and perform no further actions.",
                "Initialize {pivot} to store the value of the middle element of the array segment. This element will be used to partition the array segment into two parts.",
                "Initialize {i} to traverse from the beginning to the middle of the array segment, searching for elements greater than or equal to {pivot}.",
                "Initialize {j} to traverse from the end to the middle of the array segment, searching for elements less than or equal to {pivot}.",
                "Ensure that {i} does not exceed {j} during the process of finding and swapping elements.",
                "Increment {i} until finding an element greater than or equal to {pivot}.",
                "Decrement {j} until finding an element less than or equal to {pivot}.",
                "Check again if {i} exceeds {j} or not.",
                "Swap two elements so that on the left are elements less than or equal to {pivot}, on the right are elements greater than or equal to {pivot}. Increment {i} and decrement {j} for the next search.",
                "",
                "Continue sorting the array segment from {left} to {j}.",
                "Continue sorting the array segment from {i} to {right}."
            ],
            "js": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "Initialize {pivot} to hold the value of the middle element of the array segment. This {jspivot}",
                "Initialize {i} to traverse from the beginning to the middle of the array segment, searching for elements greater than or equal to {jspivot}.",
                "Initialize {j} to traverse from the end to the middle of the array segment, searching for elements less than or equal to {jspivot}.",
                "{{{cpp,8}}}",
                "Increment {i} until finding an element greater than or equal to {jspivot}.",
                "Decrement {j} until finding an element less than or equal to {jspivot}.",
                "{{{cpp,11}}}",
                "Swap two elements so that on the left are elements less than or equal to {jspivot}, on the right are elements greater than or equal to {jspivot}.",
                "Increment {i} for the next search.",
                "Decrement {j} for the next search.",
                "",
                "",
                "Continue sorting the array segment from {left} to {j}.",
                "Continue sorting the array segment from {i} to {right}."
            ],
            "py": [
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "Exit the function.",
                "{{{cpp,5}}}",
                "Initialize {i} to traverse from the beginning to the middle of the array segment, searching for elements greater than or equal to {pivot}. Initialize {j} to traverse from the end to the middle of the array segment, searching for elements less than or equal to {pivot}.",
                "{{{cpp,8}}}",
                "While {i} hasn't found an element greater than or equal to {pivot}.",
                "Increment {i}.",
                "While {j} hasn't found an element less than or equal to {pivot}.",
                "Decrement {j}.",
                "{{{cpp,11}}}",
                "Swap two elements so that on the left are elements less than or equal to {pivot}, on the right are elements greater than or equal to {pivot}.",
                "{{{js,10}}}",
                "{{{js,11}}}",
                "{{{cpp,14}}}",
                "{{{cpp,15}}}"
            ]
        }
    },
    "_": {
        "constraints": [
            "Values separated by whitespace.",
            "Values are integers ranging from -9 to 99.",
            "At least 7 values."
        ]
    }
}