{
    "NAME": "Cây phân đoạn",
    "INFORMATIONS": {
        "definition": "Segment tree là một cấu trúc dữ liệu sử dụng để lưu trữ thông tin về các đoạn con của một mảng, cho phép thực hiện nhanh chóng các thao tác truy vấn và cập nhật trên các đoạn đó, chẳng hạn như tìm tổng, giá trị lớn nhất, giá trị nhỏ nhất, v.v. của một đoạn con.",
        "advantage": [
            "Tốc độ truy vấn và cập nhật nhanh chóng",
            "Hỗ trợ nhiều loại truy vấn khác nhau"
        ],
        "disadvantage": [
            "Cần thêm bộ nhớ để lưu trữ cây",
            "Cài đặt hơi phức tạp"
        ]
    },
    "list": {
        "sum": {
            "name": "Tính tổng của đoạn",
            "comments": {
                "cpp": [
                    "Khởi tạo kích thước tối đa của mảng đầu vào",
                    "Khởi tạo cây phân đoạn cần kích thước gấp 4 lần kích thước mảng đầu vào (đã được chứng minh)",
                    "",
                    "Định nghĩa hàm xây dựng cây phân đoạn từ mảng đầu vào",
                    "Nếu đoạn chỉ có một phần tử, gán giá trị cho phần tử tương ứng trong cây phân đoạn",
                    "Ngược lại, tiếp tục chia nhỏ đoạn",
                    "Tính vị trí giữa",
                    "Xây dựng cây phân đoạn cho nửa bên trái",
                    "Xây dựng cây phân đoạn cho nửa bên phải",
                    "Gán giá trị tổng từ hai nửa vào phần tử hiện tại",
                    "",
                    "",
                    "",
                    "Định nghĩa hàm cập nhật giá trị cho một phần tử cụ thể",
                    "Nếu phần tử cần cập nhật nằm ngoài đoạn hiện tại, thoát khỏi hàm",
                    "Nếu đã đến phần tử cần cập nhật, gán giá trị mới cho phần tử đó",
                    "Ngược lại, tiếp tục chia nhỏ đoạn và cập nhật cây phân đoạn",
                    "{{{cpp,6}}}",
                    "Cập nhật giá trị cho nửa bên trái",
                    "Cập nhật giá trị cho nửa bên phải",
                    "{{{cpp,9}}}",
                    "",
                    "",
                    "",
                    "Định nghĩa hàm cập nhật giá trị trong một đoạn",
                    "Nếu đoạn cần cập nhật nằm ngoài đoạn hiện tại, thoát khỏi hàm",
                    "Nếu đoạn cần cập nhật gồm một phần tử, cập nhật giá trị trong cây phân đoạn cho phần tử đó bằng cách cộng thêm giá trị vào",
                    "{{{cpp,16}}}",
                    "{{{cpp,6}}}",
                    "{{{cpp,18}}}",
                    "{{{cpp,19}}}",
                    "{{{cpp,9}}}",
                    "",
                    "",
                    "",
                    "Định nghĩa hàm lấy giá trị tổng của một đoạn",
                    "Nếu đoạn cần tìm kiếm nằm ngoài đoạn hiện tại, trả về tổng là {0} (đảm bảo không ảnh hưởng đến kết quả)",
                    "Nếu đoạn cần tìm kiếm chứa đoạn hiện tại, trả về giá trị tổng là phần tử hiện tại trong cây phân đoạn",
                    "{{{cpp,6}}}",
                    "Lấy giá trị tổng từ nửa bên trái",
                    "Lấy giá trị tổng từ nửa bên phải",
                    "Trả về tổng của hai nửa"
                ],
                "js": "{{{all(cpp)}}}"
            }
        },
        "min": {
            "name": "Tìm giá trị nhỏ nhất của đoạn",
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "{{{sum-cpp,0-8}}}",
                    "Gán giá trị nhỏ nhất từ hai nửa vào phần tử hiện tại",
                    "{{{sum-cpp,10-19}}}",
                    "{{{cpp,12}}}",
                    "{{{sum-cpp,21-30}}}",
                    "{{{cpp,12}}}",
                    "",
                    "",
                    "",
                    "Định nghĩa hàm lấy giá trị nhỏ nhất của một đoạn",
                    "Nếu đoạn cần tìm kiếm nằm ngoài đoạn hiện tại, trả về giá trị nhỏ nhất là {INTMAX} (đảm bảo không ảnh hưởng đến kết quả)",
                    "Nếu đoạn cần tìm kiếm chứa đoạn hiện tại, trả về giá trị nhỏ nhất là phần tử hiện tại trong cây phân đoạn",
                    "{{{cpp,9}}}",
                    "Lấy giá trị nhỏ nhất từ nửa bên trái",
                    "Lấy giá trị nhỏ nhất từ nửa bên phải",
                    "Trả về giá trị nhỏ nhất của hai nửa"
                ],
                "js": [
                    "{{{cpp,3-38}}}",
                    "Nếu đoạn cần tìm kiếm nằm ngoài đoạn hiện tại, trả về giá trị nhỏ nhất là {Infinity} (đảm bảo không ảnh hưởng đến kết quả)",
                    "{{{cpp,40-44}}}"
                ]
            }
        },
        "max": {
            "name": "Tìm giá trị lớn nhất của đoạn",
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "{{{sum-cpp,0-8}}}",
                    "Gán giá trị lớn nhất từ hai nửa vào phần tử hiện tại",
                    "{{{sum-cpp,10-19}}}",
                    "{{{cpp,12}}}",
                    "{{{sum-cpp,21-30}}}",
                    "{{{cpp,12}}}",
                    "",
                    "",
                    "",
                    "Định nghĩa hàm lấy giá trị lớn nhất của một đoạn",
                    "Nếu đoạn cần tìm kiếm nằm ngoài đoạn hiện tại, trả về giá trị lớn nhất là {INTMIN} (đảm bảo không ảnh hưởng đến kết quả)",
                    "Nếu đoạn cần tìm kiếm chứa đoạn hiện tại, trả về giá trị lớn nhất là phần tử hiện tại trong cây phân đoạn",
                    "{{{cpp,9}}}",
                    "Lấy giá trị lớn nhất từ nửa bên trái",
                    "Lấy giá trị lớn nhất từ nửa bên phải",
                    "Trả về giá trị lớn nhất của hai nửa"
                ],
                "js": [
                    "{{{cpp,3-38}}}",
                    "Nếu đoạn cần tìm kiếm nằm ngoài đoạn hiện tại, trả về giá trị lớn nhất là {-_Infinity} (đảm bảo không ảnh hưởng đến kết quả)",
                    "{{{cpp,40-44}}}"
                ]
            }
        },
        "gcd": {
            "name": "Tìm ước chung lớn nhất của đoạn",
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "{{{sum-cpp,0-8}}}",
                    "Gán ước chung lớn nhất từ hai nửa vào phần tử hiện tại",
                    "{{{sum-cpp,10-19}}}",
                    "{{{cpp,12}}}",
                    "{{{sum-cpp,21-30}}}",
                    "{{{cpp,12}}}",
                    "",
                    "",
                    "",
                    "Định nghĩa hàm lấy ước chung lớn nhất của một đoạn",
                    "Nếu đoạn cần tìm kiếm nằm ngoài đoạn hiện tại, trả về ước chung lớn nhất là {0} (đảm bảo không ảnh hưởng đến kết quả)",
                    "Nếu đoạn cần tìm kiếm chứa đoạn hiện tại, trả về ước chung lớn nhất là phần tử hiện tại trong cây phân đoạn",
                    "{{{cpp,9}}}",
                    "Lấy ước chung lớn nhất từ nửa bên trái",
                    "Lấy ước chung lớn nhất từ nửa bên phải",
                    "Trả về ước chung lớn nhất của hai nửa"
                ],
                "js": [
                    "Định nghĩa hàm tính ước chung lớn nhất",
                    "",
                    "{{{cpp,3-44}}}"
                ]
            }
        },
        "lcm": {
            "name": "Tìm bội chung nhỏ nhất của đoạn",
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "{{{sum-cpp,0-8}}}",
                    "Gán bội chung nhỏ nhất từ hai nửa vào phần tử hiện tại",
                    "{{{sum-cpp,10-19}}}",
                    "{{{cpp,12}}}",
                    "{{{sum-cpp,21-30}}}",
                    "{{{cpp,12}}}",
                    "",
                    "",
                    "",
                    "Định nghĩa hàm lấy bội chung nhỏ nhất của một đoạn",
                    "Nếu đoạn cần tìm kiếm nằm ngoài đoạn hiện tại, trả về bội chung nhỏ nhất là {1} (đảm bảo không ảnh hưởng đến kết quả)",
                    "Nếu đoạn cần tìm kiếm chứa đoạn hiện tại, trả về bội chung nhỏ nhất là phần tử hiện tại trong cây phân đoạn",
                    "{{{cpp,9}}}",
                    "Lấy bội chung nhỏ nhất từ nửa bên trái",
                    "Lấy bội chung nhỏ nhất từ nửa bên phải",
                    "Trả về bội chung nhỏ nhất của hai nửa"
                ],
                "js": [
                    "{{{gcd-js,0}}}",
                    "Định nghĩa hàm tính bội chung nhỏ nhất",
                    "",
                    "{{{cpp,3-44}}}"
                ]
            }
        }
    },
    "constraints": [
        "Các giá trị cách nhau bởi khoảng trắng",
        "Giá trị là một số nguyên nằm trong đoạn từ 1 đến 100",
        "Có tối thiểu 2 giá trị (tối đa 8 giá trị sẽ được sử dụng)"
    ],
    "complexity": {
        "build": "Xây dựng",
        "update": "Cập nhật một phần tử",
        "rangeUpdate": "Cập nhật một đoạn",
        "get": "Truy vấn"
    }
}