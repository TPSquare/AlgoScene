{
    "NAME": "Find Path",
    "list": {
        "bfs": {
            "name": "Breadth-First Search (BFS)",
            "informations": {
                "idea": [
                    "Start at the beginning point and expand to adjacent levels.",
                    "Explore all neighbors of the current point before moving to neighbors of previously visited points."
                ],
                "advantage": [
                    "Ensures finding the shortest path.",
                    "Simple and easy to implement.",
                    "Comprehensive exploration of graphs and matrices."
                ],
                "disadvantage": [
                    "Requires large memory.",
                    "Ineffective for large graphs or matrices.",
                    "Not optimal for graphs or matrices with weights.",
                    "Difficulty handling infinite graphs or matrices."
                ],
                "application": [
                    "Finding the shortest path in unweighted graphs or matrices.",
                    "Search in games and AI algorithms.",
                    "Checking graph or matrix connectivity.",
                    "Handling data structures like trees.",
                    "Graph or matrix classification.",
                    "GPS systems and route finding.",
                    "Checking cycles in graphs or matrices."
                ]
            },
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "Define the {bfs} function.",
                    "Get the number of rows of the matrix.",
                    "Get the number of columns of the matrix.",
                    "Initialize a matrix to mark visited points.",
                    "Initialize a matrix to store information about the previous point in the path.",
                    "Initialize a queue to store points to be visited.",
                    "Add the starting point to the queue.",
                    "Mark the starting point as visited.",
                    "Define movement directions (up, down, left, right).",
                    "While there are still points to visit in the queue:",
                    "Get the current point (first one) from the queue.",
                    "Remove the current point from the queue.",
                    "Get the {x} coordinate of the current point.",
                    "Get the {y} coordinate of the current point.",
                    "Check if the current point is the destination point. If true, reconstruct the path and return it.",
                    "Initialize a {vector} to store the path.",
                    "Reconstruct the path from the destination point back to the starting point.",
                    "Add the current point to the path.",
                    "Reverse the path to get the correct order.",
                    "Return the path.",
                    "",
                    "If not yet at the destination point, explore movement directions.",
                    "Calculate the new {x} coordinate.",
                    "Calculate the new {y} coordinate.",
                    "Check if the new coordinates are valid and have not been visited yet. If satisfied, update the status and information of that point.",
                    "Add the new point to the queue.",
                    "Mark the new point as visited.",
                    "Record the current point as the previous point for the new point.",
                    "",
                    "",
                    "",
                    "Return an empty {vector} if no path is found."
                ],
                "js": [
                    "{{{cpp,3-7}}}",
                    "Initialize a queue to store points to be visited. Add the starting point to the queue.",
                    "{{{cpp,10-12}}}",
                    "Get the coordinates of the current point (first one) from the queue.",
                    "{{{cpp,17}}}",
                    "Initialize an array to store the path.",
                    "{{{cpp,19-20}}}",
                    "Return the path after reversing the order.",
                    "",
                    "{{{cpp,24}}}",
                    "Calculate the new {xjs} coordinate.",
                    "Calculate the new {yjs} coordinate.",
                    "{{{cpp,27-30}}}",
                    "",
                    "",
                    "",
                    "Return an empty array if no path is found."
                ]
            }
        },
        "dfs": {
            "name": "Depth-First Search (DFS)",
            "informations": {
                "idea": [
                    "Explore one branch of the graph or matrix deeply before backtracking to explore other branches.",
                    "Traverse until no more points can be visited, then backtrack and explore remaining branches."
                ],
                "advantage": [
                    "Efficient memory usage.",
                    "Quickly searches deeper.",
                    "Simple and easy to implement."
                ],
                "disadvantage": "Does not guarantee finding the shortest path.",
                "application": [
                    "Search and mark paths in graphs or matrices.",
                    "Checking cycles in graphs or matrices.",
                    "Checking graph connectivity.",
                    "Handling data structures like trees.",
                    "Searching in games and AI algorithms."
                ]
            },
            "comments": {
                "cpp": [
                    "",
                    "",
                    "",
                    "Define the {dfs} function.",
                    "If a path is found, stop the function.",
                    "Get the number of rows of the matrix.",
                    "Get the number of columns of the matrix.",
                    "Define movement directions (up, down, left, right).",
                    "Mark the point {(x,y)1} as visited.",
                    "Add {(x,y)2} to the path.",
                    "Traverse through movement directions.",
                    "Calculate the new {x} coordinate.",
                    "Calculate the new {y} coordinate.",
                    "Check if the new coordinates are valid and have not been visited yet.",
                    "Proceed with {dfs} from the new point.",
                    "",
                    "If the current point is not the destination, remove it from the path.",
                    "If the current point is the destination, mark that the path has been found.",
                    "",
                    "",
                    "Define the {findPath} function to find a path based on {dfs}.",
                    "Get the number of rows of the matrix.",
                    "Get the number of columns of the matrix.",
                    "Initialize a matrix to mark visited points.",
                    "Initialize a {vector} to store the path.",
                    "Initialize a variable to mark if a path has been found.",
                    "Start {dfs} from the starting point.",
                    "If a path has been found, return that path.",
                    "Return an empty {vector} if no path is found."
                ],
                "js": [
                    "{{{cpp,20}}}",
                    "{{{cpp,3-4}}}",
                    "Mark the point {(x,y)2} as visited.",
                    "Add {(x,y)3} to the path.",
                    "{{{cpp,10-17}}}",
                    "",
                    "{{{cpp,5-6}}}",
                    "{{{cpp,23}}}",
                    "Initialize an array to store the path.",
                    "{{{cpp,7}}}",
                    "{{{cpp,25-27}}}",
                    "Return an empty array if no path is found."
                ]
            }
        }
    },
    "constraints": {
        "default": [
            "Yellow cells are starting points; double-click to swap with the ending point.",
            "Green cells are ending points; double-click to swap with the starting point.",
            "White cells are passable; click to change to impassable.",
            "Black cells are impassable; click to change to passable.",
            "Double-click on a white or black cell to change it to the starting point."
        ]
    }
}