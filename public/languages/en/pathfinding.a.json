{
    "NAME": "Pathfinding",
    "bfs": {
        "name": "Breadth-First Search (BFS)",
        "informations": {
            "idea": [
                "Start at the starting point and expand to each successive level",
                "Traverse all points adjacent to the current point before moving to points adjacent to those already traversed at the previous level"
            ],
            "advantage": [
                "Ensures finding the shortest path",
                "Simple and easy to implement",
                "Comprehensively explores the graph, matrix"
            ],
            "disadvantage": [
                "Requires large memory",
                "Not efficient for large graphs, matrices",
                "Not optimized for weighted graphs, matrices",
                "Difficulties when working with infinite graphs, matrices"
            ],
            "application": [
                "Finding the shortest path in unweighted graphs, matrices",
                "Searching in games and AI algorithms",
                "Checking the connectivity of graphs, matrices",
                "Handling data structures like trees",
                "Graph classification, matrices",
                "Creating GPS systems and route finding",
                "Detecting cycles in graphs, matrices"
            ]
        },
        "comments": {
            "cpp": [
                "Declare the {bfs} function",
                "Get the number of rows of the matrix",
                "Get the number of columns of the matrix",
                "Initialize a matrix to mark visited nodes",
                "Initialize a matrix to store information about the previous node in the path",
                "Initialize a queue to store nodes to be visited",
                "Enqueue the starting node",
                "Mark the starting node as visited",
                "Define movement directions (up, down, left, right)",
                "While the queue still has nodes to be visited",
                "Get the current node (front) from the queue",
                "Remove the current node from the queue",
                "Get the {x} coordinate of the current node",
                "Get the {y} coordinate of the current node",
                "Check if the current node is the end node. If true, reconstruct the path and return.",
                "Initialize a {vector} to store the path",
                "Reconstruct the path from the end node to the start node",
                "Add the current node to the path",
                "Reverse the path to correct order",
                "Return the path",
                "",
                "If not yet at the end node, iterate through movement directions",
                "Calculate new {x} coordinate",
                "Calculate new {y} coordinate",
                "Check if the new coordinates are valid and unvisited. If satisfied, update the status and information of that node.",
                "Enqueue the new node",
                "Mark the new node as visited",
                "Save the current node as the previous node of the new node",
                "",
                "",
                "",
                "Return an empty {vector} if no path is found"
            ],
            "js": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "{{{cpp,2}}}",
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "Initialize a queue to store nodes to be visited. Enqueue the starting node.",
                "{{{cpp,7}}}",
                "{{{cpp,8}}}",
                "{{{cpp,9}}}",
                "Dequeue the current node (front) from the queue",
                "{{{cpp,14}}}",
                "Initialize an array to store the path",
                "{{{cpp,16}}}",
                "{{{cpp,17}}}",
                "Return the path after reversing the order",
                "",
                "{{{cpp,21}}}",
                "Calculate new {x} coordinate",
                "Calculate new {y} coordinate",
                "{{{cpp,24}}}",
                "{{{cpp,25}}}",
                "{{{cpp,26}}}",
                "{{{cpp,27}}}",
                "",
                "",
                "",
                "Return an empty array if no path is found"
            ]
        }
    },
    "dfs": {
        "name": "Depth-First Search (DFS)",
        "informations": {
            "idea": [
                "Explore a branch of the graph, delve deeper into the matrix before returning to explore other branches",
                "Traverse a branch until no more points can be explored, then backtrack and explore the remaining branches"
            ],
            "advantage": [
                "Uses memory efficiently",
                "Quickly searches deeper",
                "Simple and easy to implement"
            ],
            "disadvantage": "Does not guarantee finding the shortest path",
            "application": [
                "Searching and marking paths in a graph, matrix",
                "Checking cycles in a graph, matrix",
                "Checking the connectivity of a graph, matrix",
                "Handling data structures like trees",
                "Searching in games and AI algorithms"
            ]
        },
        "comments": {
            "cpp": [
                "Declare the {dfs} function",
                "If a path is found, stop the function",
                "Get the number of rows of the matrix",
                "Get the number of columns of the matrix",
                "Define the movement directions (up, down, left, right)",
                "Mark the {(1_x_,_ _y_)1} point as visited",
                "Add {(2_x_,_ _y_)2} to the path",
                "Traverse through the movement directions",
                "Calculate the new {x} coordinate",
                "Calculate the new {y} coordinate",
                "Check if the new coordinates are valid and not visited yet",
                "Perform {dfs} from the new point",
                "",
                "If the current point is not the end point, remove it from the path",
                "If the current point is the end point, mark that the path is found",
                "",
                "",
                "Declare the {findPath} function to find the path based on {dfs}",
                "Get the number of rows of the matrix",
                "Get the number of columns of the matrix",
                "Initialize a matrix to mark visited points",
                "Initialize a {vector} to store the path",
                "Initialize a variable to mark whether a path is found or not",
                "Start the {dfs} traversal from the starting point",
                "If a path is found, return that path",
                "Return an empty {vector} if no path is found"
            ],
            "js": [
                "{{{cpp,17}}}",
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "Mark the {(2_x_,_ _y_)2} point as visited",
                "Add {(3_x_,_ _y_)3} to the path",
                "{{{cpp,7}}}",
                "{{{cpp,8}}}",
                "{{{cpp,9}}}",
                "{{{cpp,10}}}",
                "{{{cpp,11}}}",
                "",
                "{{{cpp,13}}}",
                "{{{cpp,14}}}",
                "",
                "{{{cpp,2}}}",
                "{{{cpp,3}}}",
                "{{{cpp,20}}}",
                "Initialize an array to store the path",
                "{{{cpp,4}}}",
                "{{{cpp,22}}}",
                "{{{cpp,23}}}",
                "{{{cpp,24}}}",
                "Return an empty array if no path is found"
            ]
        }
    },
    "_": {
        "constraints": [
            "The yellow cell is the starting point, double-click to swap with the ending cell.",
            "The green cell is the ending point, double-click to swap with the starting cell.",
            "The white cell is passable, click to change it to impassable.",
            "The black cell is impassable, click to change it to passable.",
            "Double-click on a white or black cell to change it to the starting cell."
        ]
    }
}