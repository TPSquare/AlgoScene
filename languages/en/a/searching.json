{
    "NAME": "Searching",
    "sequential": {
        "name": "Sequential Search",
        "informations": {
            "idea": [
                "Start from the first element of the array, the algorithm checks if this element is the desired one",
                "If not, it moves to the next element and continues the checking process",
                "This process continues until the element is found or there are no more elements to check"
            ],
            "advantage": [
                "Simple, easy to understand, and easy to implement",
                "Does not require the array to be sorted"
            ],
            "disadvantage": "Poor performance for large arrays",
            "application": [
                "Often used for teaching and illustrating basic sorting algorithms",
                "Searching in small or unsorted arrays"
            ]
        },
        "comments": {
            "cpp": [
                "Declare the function {sqts}",
                "Loop through each element of the array",
                "If the current element is {target}, return the position {i}",
                "If {target} is not found, the function will return {-_1}"
            ],
            "js": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "{{{cpp,2}}}",
                "{{{cpp,3}}}"
            ],
            "py": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "Check if the current element is {target}",
                "If true, return the position {i}",
                "{{{cpp,3}}}"
            ]
        }
    },
    "binary": {
        "name": "Binary Search",
        "informations": {
            "idea": [
                "Start by selecting the element in the middle of the array that is sorted in ascending order",
                "Compare this element with the value to be found, if they are equal, conclude the result and end the search",
                "If the value to be found is less than the middle element, continue searching in the left half of the array",
                "If the value to be found is greater than the middle element, continue searching in the right half of the array",
                "Repeat the above process until the value is found or the search range becomes empty"
            ],
            "advantage": "Good performance, even with large arrays",
            "disadvantage": "Requires the array to be sorted before performing the search",
            "application": [
                "Searching in large sorted arrays",
                "Used in databases for quickly searching information in sorted tables",
                "Used in Binary Search Tree data structure for efficient searching, inserting, and deleting elements"
            ]
        },
        "comments": {
            "cpp": [
                "Declare the function {bnrs}",
                "Initialize the {left} variable to mark the start position in the search range",
                "Initialize the {right} variable to mark the end position in the search range",
                "Condition to ensure that the search process will continue until {target} is found or until there are no more elements in the search range",
                "Initialize the {middle} variable to get the middle position in the search range",
                "If the middle element is {target}, return the position {middle}",
                "When the middle element is not {target}, if {target} is on the right side of {middle}, update {left} to {middle_ _+_ _1}, narrowing the search range to the right half",
                "Otherwise, when {target} is on the left side of {middle}, update {right} to {middle_ _-_ _1}, narrowing the search range to the left half",
                "",
                "If {target} is not found, the function will return {-_1}"
            ],
            "js": [
                "{{{cpp,0}}}",
                "{{{cpp,1}}}",
                "{{{cpp,2}}}",
                "{{{cpp,3}}}",
                "Initialize the {middlejs} variable to get the middle position in the search range",
                "If the middle element is {target}, return the position {middlejs}",
                "When the middle element is not {target}, if {target} is on the right side of {middlejs}, update {left} to {middlejs_ _+_ _1}, narrowing the search range to the right half",
                "Otherwise, when {target} is on the left side of {middlejs}, update {right} to {middlejs_ _-_ _1}, narrowing the search range to the left half",
                "",
                "{{{cpp,9}}}"
            ],
            "py": [
                "{{{cpp,0}}}",
                "Initialize 2 variables {left} and {right} to mark the search range",
                "{{{cpp,3}}}",
                "{{{cpp,4}}}",
                "Check if the middle element is {target}",
                "If true, return the position {middle}",
                "When the middle element is not {target}, check if {target} is on the right side of {middle}",
                "If true, update {left} to {middle_ _+_ _1}, narrowing the search range to the right half",
                "Otherwise, when {target} is on the left side of {middle}",
                "Update {right} to {middle_ _-_ _1}, narrowing the search range to the left half",
                "{{{cpp,9}}}"
            ]
        }
    },
    "_": {
        "constraints": [
            "The first line is the value to search for",
            "The second line is the array of values (minimum of 12 values)",
            "Values separated by whitespace",
            "Values are integers in the range from -9 to 99"
        ]
    }
}